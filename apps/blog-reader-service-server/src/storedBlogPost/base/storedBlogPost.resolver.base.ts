/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StoredBlogPost } from "./StoredBlogPost";
import { StoredBlogPostCountArgs } from "./StoredBlogPostCountArgs";
import { StoredBlogPostFindManyArgs } from "./StoredBlogPostFindManyArgs";
import { StoredBlogPostFindUniqueArgs } from "./StoredBlogPostFindUniqueArgs";
import { DeleteStoredBlogPostArgs } from "./DeleteStoredBlogPostArgs";
import { StoredBlogPostService } from "../storedBlogPost.service";
@graphql.Resolver(() => StoredBlogPost)
export class StoredBlogPostResolverBase {
  constructor(protected readonly service: StoredBlogPostService) {}

  async _storedBlogPostsMeta(
    @graphql.Args() args: StoredBlogPostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StoredBlogPost])
  async storedBlogPosts(
    @graphql.Args() args: StoredBlogPostFindManyArgs
  ): Promise<StoredBlogPost[]> {
    return this.service.storedBlogPosts(args);
  }

  @graphql.Query(() => StoredBlogPost, { nullable: true })
  async storedBlogPost(
    @graphql.Args() args: StoredBlogPostFindUniqueArgs
  ): Promise<StoredBlogPost | null> {
    const result = await this.service.storedBlogPost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StoredBlogPost)
  async deleteStoredBlogPost(
    @graphql.Args() args: DeleteStoredBlogPostArgs
  ): Promise<StoredBlogPost | null> {
    try {
      return await this.service.deleteStoredBlogPost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
