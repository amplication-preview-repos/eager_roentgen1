/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StoredBlogPostService } from "../storedBlogPost.service";
import { StoredBlogPostCreateInput } from "./StoredBlogPostCreateInput";
import { StoredBlogPost } from "./StoredBlogPost";
import { StoredBlogPostFindManyArgs } from "./StoredBlogPostFindManyArgs";
import { StoredBlogPostWhereUniqueInput } from "./StoredBlogPostWhereUniqueInput";
import { StoredBlogPostUpdateInput } from "./StoredBlogPostUpdateInput";

export class StoredBlogPostControllerBase {
  constructor(protected readonly service: StoredBlogPostService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StoredBlogPost })
  async createStoredBlogPost(
    @common.Body() data: StoredBlogPostCreateInput
  ): Promise<StoredBlogPost> {
    return await this.service.createStoredBlogPost({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StoredBlogPost] })
  @ApiNestedQuery(StoredBlogPostFindManyArgs)
  async storedBlogPosts(
    @common.Req() request: Request
  ): Promise<StoredBlogPost[]> {
    const args = plainToClass(StoredBlogPostFindManyArgs, request.query);
    return this.service.storedBlogPosts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StoredBlogPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async storedBlogPost(
    @common.Param() params: StoredBlogPostWhereUniqueInput
  ): Promise<StoredBlogPost | null> {
    const result = await this.service.storedBlogPost({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StoredBlogPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStoredBlogPost(
    @common.Param() params: StoredBlogPostWhereUniqueInput,
    @common.Body() data: StoredBlogPostUpdateInput
  ): Promise<StoredBlogPost | null> {
    try {
      return await this.service.updateStoredBlogPost({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StoredBlogPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStoredBlogPost(
    @common.Param() params: StoredBlogPostWhereUniqueInput
  ): Promise<StoredBlogPost | null> {
    try {
      return await this.service.deleteStoredBlogPost({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
